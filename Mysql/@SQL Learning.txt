Rank() Over(/partition by <name> ORDER BY <marks> DESC) <Ranks>

100     1
50      2
50      2
40      4

DENSE_RANK() OVER(/PARTITION BY <StudentName> *ORDER BY <Marks> ) <Ranks>

40      1
50      2
50      2
100     3

ROW_NUMBER() OVER(ORDER BY <marks> desc)

LIMIT 1 OFFSET 1
    or 
LIMIT 5,1 /* where 5 is OFSET and 1 is LIMIT*/

WITH <*alias> (/<coulmnNames>) AS
    ( your subquery goes here)
SELECT *<coulmnName>
FROM *<tableName>
WHERE <codition>;

Lead(expr, /N, /default) OVER (Window_specification | Window_name)
Lag(expr, N, default) OVER (Window_specification | Window_name)

    + expr: It can be a column or any bulit-in function.
    + N: It is a positive value which determine number of rows preceding/succeeding the current row. If it is omitted in query then its default value is 1.
    + default: It is the default value return by function in-case no row precedes/succeedes the current row by N rows. If it is missing then it is by default NULL.

    + Window_specification: It consist of query partition clause which determines how the query rows are partitioned and ordered.
    + Window_name: If window is specified elsewhere in the query then it is referenced using this Window_name.

not equlas denoted by <> or !=

... 
WHERE <alias>
NOT IN (subquery)

...
WHERE <alias> IS NULL

OVER(PARTITION BY<>) is slower than GROUP BY <>

Referencing master query table in subquery of where clause
    SELECT *
    FROM <table1> e1
    WHERE
        3 > (SELECT COUNT(DISTINCT e2.Salary)
            FROM <table1> e2
            WHERE
            e2.Salary > e1.Salary
            )